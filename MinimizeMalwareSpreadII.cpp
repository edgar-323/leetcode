/*
(This problem is the same as Minimize Malware Spread, with the differences bolded.)

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1
Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
*/

class Solution {
private:
    int N;

    int visit(
            const int u,
            std::vector<bool>& visited,
            const std::vector<std::vector<int>>& adj_matrix) {
        if (visited[u]) {
            return 0;
        }
        visited[u] = true;
        int num_infected = 1;
        for (auto v = 0; v < N; ++v) {
            if (adj_matrix[u][v]) {
                num_infected += visit(v, visited, adj_matrix);
            }
        }

        return num_infected;
    }

    int solution1(
            const std::vector<std::vector<int>>& adj_matrix, 
            const std::vector<int>& infected_machines) {
        /* Time-Complexity:     O(K * N^2)
         * Space-Complexity:    O(N)
         *      Where:
         *          K = # of infected machines
         *          N = # of total machines
         */
        // Explanation:
        // For every infected machine u, we calculate the total number of infected machines
        // in the network, given that we disconnected u.
        // We want to disconnect infected machine u that miniizes this.
        // If there are multiple number of such machines we return machine with smallest index.
        // Every DFS call takes O(N^2) time because traversing adj_matrix[u] (for some machine u) takes O(N) time.
        // This is a side-effect of having an adjacency matrix instead of an adjacency list. 
        // If we transform adj_matrix into adj_list, then we can reduce our time to O(N^2 + K*(N+E)), where E is the number
        // of connections.
        N = adj_matrix.size();
        int min_infected = N;
        int min_machine = N;

        for (const auto u : infected_machines) {
            auto visited = std::vector<bool>(N, false);
            visited[u] = true;
            int infected = 0;
            for (const auto v : infected_machines) {
                infected += visit(v, visited, adj_matrix);
            }
            if (min_infected > infected) {
                min_infected = infected;
                min_machine = u;
            } else if (min_infected == infected) {
                min_machine = std::min(min_machine, u);
            }
        }

        return min_machine;
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        return solution1(graph, initial);       
    }
};
